#! /bin/bash

UnsetEnv() {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
  unset AWS_PROFILE
  unset ASSUMEROLE_ENV
  unset SSHKEY
}

SelectProfile() {
  echo "Select from these available accounts:"
  echo ""

  echo "${AVAILABLE_PROFILES}"

  printf "\nAccount:   "
  read aws_account
}

SaveCredentials() {
  [[ -d ~/.assumerole.d/cache ]] || mkdir -p ~/.assumerole.d/cache

  {
    echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
    echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
    echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"
    echo "export ROLE=${ROLE}"
    echo "export ACCOUNT=${ACCOUNT}"
    echo "export AWS_ACCOUNT_ID=${ACCOUNT}"
    echo "export aws_account=${aws_account}"
    echo "export AWS_ACCOUNT=${aws_account}"
    echo "export AWS_EXPIRATION=${AWS_EXPIRATION}"
    echo "export SSHKEY=${SSHKEY}"
    echo ${ASSUMEROLE_ENV}
  } > ~/.assumerole.d/cache/${aws_account}

  chmod 0600 ~/.assumerole.d/cache/${aws_account}
}

CheckAndLoadFromCache() {
  cache_file=~/.assumerole.d/cache/${aws_account}
  if [[ -e ${cache_file} ]]
  then
    ### Cache exists, load it and check if it is still valid
    . ${cache_file}
    if aws sts get-caller-identity >/dev/null 2>&1
    then
      PrintUnlessNotVerbose "INFO: Credentials for ${aws_account} loaded from cache."
      return 0
    else
      PrintUnlessNotVerbose "INFO: Cache found for ${aws_account}, but credentials have expired and will be deleted."
      rm -f ${cache_file}
      return 1
    fi
  else
    return 1
  fi
}

GetAccountInfo() {
               PROFILE=$(jq    --raw-output ".assume_roles[\"${aws_account}\"][\"aws_profile\"]" ${CONF})
               ACCOUNT=$(jq    --raw-output ".assume_roles[\"${aws_account}\"][\"aws_account\"]" ${CONF})
                  ROLE=$(jq    --raw-output ".assume_roles[\"${aws_account}\"][\"aws_role\"]"    ${CONF})
  MAX_SESSION_DURATION=$(jq    --raw-output ".assume_roles[\"${aws_account}\"][\"max_session_duration\"]" ${CONF})
        ASSUMEROLE_ENV=$(jq -j --raw-output ".assume_roles[\"${aws_account}\"] | select(.environment != null) | .environment[] | \"export \", .name, \"=\", .value, \";\n\"" ${CONF})
                SSHKEY=$(jq    --raw-output ".assume_roles[\"${aws_account}\"] | select(.sshkey != null) | .sshkey" ${CONF})
}

CreateCredentials() {
  GetAccountInfo

  [[ "${PROFILE}" = "null" ]] && { PrintUnlessNotVerbose "aws_profile missing for account ${aws_account} in ${CONF}"; exit 1; }
  [[ "${ACCOUNT}" = "null" ]] && { PrintUnlessNotVerbose "aws_account missing for account ${aws_account} in ${CONF}"; exit 1; }
  [[ "${ROLE}" = "null" ]]    && { PrintUnlessNotVerbose "aws_role missing for account ${aws_account} in ${CONF}"; exit 1; }
  [[ "${MAX_SESSION_DURATION}" = "null" ]] && MAX_SESSION_DURATION=${AWS_STS_DURATION_SECONDS:-3600}

  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
  unset AWS_ACCOUNT

  export AWS_PROFILE=${PROFILE}

  role_session_name=$(echo ${ROLE}${$} | tr '/' '_')

  JSON=$(aws sts assume-role \
           --role-arn arn:aws:iam::${ACCOUNT}:role/${ROLE} \
           --role-session-name ${role_session_name} \
           --duration-seconds ${MAX_SESSION_DURATION} 2>&1)

  if [[ $? -ne 0 ]]; then
    PrintUnlessNotVerbose "${JSON}"
    exit 1
  fi 

      AWS_ACCESS_KEY_ID=$(echo ${JSON} | jq --raw-output ".Credentials[\"AccessKeyId\"]")
  AWS_SECRET_ACCESS_KEY=$(echo ${JSON} | jq --raw-output ".Credentials[\"SecretAccessKey\"]")
      AWS_SESSION_TOKEN=$(echo ${JSON} | jq --raw-output ".Credentials[\"SessionToken\"]")
         AWS_EXPIRATION=$(echo ${JSON} | jq --raw-output ".Credentials[\"Expiration\"]")

  unset AWS_PROFILE

  export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
  export AWS_ACCOUNT=${aws_account}
  export AWS_ACCOUNT_ID=${ACCOUNT}

  SaveCredentials
}

SetEnvironment() {
  [[ -n ${ASSUMEROLE_ENV} ]] && {
    PrintUnlessNotVerbose "INFO: Setting environment for profile ${PROFILE}"
    eval $(echo ${ASSUMEROLE_ENV})
  }
}

AddSshKey() {
  [[ -n ${SSHKEY} ]] && {
    if ! ssh-add -l | grep -q $(basename ${SSHKEY})
    then
      PrintUnlessNotVerbose "INFO: Adding key ${SSHKEY} for profile ${PROFILE}"
      ssh-add ${SSHKEY}
    fi
  }
}

GetAccountName() {
  if [[ -n ${1} && ${AVAILABLE_PROFILES} == *${1}* ]]
  then
    # Argument passed on commandline is a valid profile
    PrintUnlessNotVerbose "INFO: The profile ${1} passed on the commandline is a valid profile."
    aws_account=${1}
  else
    SelectProfile
  fi
}

PrintUnlessNotVerbose() {
  if [[ -z ${ASSUMEROLE_COMMAND} ]]; then
    if [[ ${ASSUMEROLE_QUIET:-0} -eq 0 ]]; then
      echo "${*}"
    fi
  fi
}

PrintAccountInfo() {
  GetAccountInfo
  
  PrintUnlessNotVerbose "Account Name: ${aws_account}"
  PrintUnlessNotVerbose "Account ID: ${ACCOUNT}"
  PrintUnlessNotVerbose "Assumed Role: ${ROLE}"
}

# Start with unsetting the current AWS_* envvars to avoid namespace pollution
UnsetEnv


export CONF="${HOME}/.assumerole"
AVAILABLE_PROFILES=$(jq --raw-output ".assume_roles | to_entries[] | .key"  ${CONF})

if [[ -n ${1} && ${1} == accountlist ]]
then
  PrintUnlessNotVerbose "info"
  PrintUnlessNotVerbose "accountlist"
  PrintUnlessNotVerbose ${AVAILABLE_PROFILES}
  exit 0
elif [[ -n ${1} && ${1} == info ]]
then
  shift 1
  GetAccountName "$@"
  PrintAccountInfo
  exit 0
fi

GetAccountName "$@"

if ! CheckAndLoadFromCache
then
  CreateCredentials "$@"
fi

SetEnvironment
AddSshKey

AWS_CALLER_IDENTITY=$(aws sts get-caller-identity)
JSONCALLERIDENTITYACCOUNT=$(echo ${AWS_CALLER_IDENTITY} | jq --raw-output '.Account')
JSONCALLERIDENTITYROLEARN=$(echo ${AWS_CALLER_IDENTITY} | jq --raw-output '.Arn')
ROLEBASENAME="$(basename ${ROLE})"

if [[ ${JSONCALLERIDENTITYACCOUNT} == ${ACCOUNT} ]]
then
  PrintUnlessNotVerbose "INFO: Account of assumed role ${JSONCALLERIDENTITYACCOUNT} matches desired account ${ACCOUNT}"
  if [[ ${JSONCALLERIDENTITYROLEARN} == */${ROLEBASENAME}/* ]]
  then
    PrintUnlessNotVerbose "INFO: Assumed role ${JSONCALLERIDENTITYROLEARN} matches desired role ${ROLE}"
    PrintUnlessNotVerbose "INFO: The temporary credentials expire on ${AWS_EXPIRATION}"
    PrintUnlessNotVerbose "INFO: Copy paste following commands to have the same credentials in"
    PrintUnlessNotVerbose "      another shell"
    PrintUnlessNotVerbose "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
    PrintUnlessNotVerbose "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
    PrintUnlessNotVerbose "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"
    export aws_account
    if [[ -n ${ASSUMEROLE_COMMAND} ]]; then
      PrintUnlessNotVerbose "INFO: Running command ${ASSUMEROLE_COMMAND}"
      ${ASSUMEROLE_COMMAND}
    else
      PrintUnlessNotVerbose "INFO: Starting a new shell"
      ${SHELL}
    fi
  else
    PrintUnlessNotVerbose "ERROR: Assumed role ${JSONCALLERIDENTITYROLEARN} does not match desired role ${ROLE}"
    PrintUnlessNotVerbose "ERROR: Unsetting environment"
    UnsetEnv
  fi
else
  PrintUnlessNotVerbose "ERROR: Account of assumed role ${JSONCALLERIDENTITYACCOUNT} does not match desired account ${ACCOUNT}"
  PrintUnlessNotVerbose "ERROR: Unsetting environment"
  UnsetEnv
fi
